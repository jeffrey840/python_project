


Here are the organized questions and their respective options:

1. **Which of the following statements are true?**游린
   - A. Every recursive method must have a base case or a stopping condition.
   - B. Every recursive call reduces the original problem, bringing it increasingly closer to a base case until it becomes that case.
   - C. Infinite recursion can occur if recursion does not reduce the problem in a manner that allows it to eventually converge into the base case.
   - D. Every recursive method must have a return value.
   - E. A recursive method is invoked differently from a non-recursive method.

2. **Fill in the code to complete the following method for computing factorial.**
   - `/* Return the factorial for a specified index */ public static long factorial(int n) { if (n == 0) // Base case return 1; else return _____________; // Recursive call }`
   - Options: `n * factorial(n - 1)`, `factorial(n - 1) * n`

3. **What are the base cases in the following recursive method?**
   - `public static void xMethod(int n) { if (n > 0) { System.out.print(n % 10); xMethod(n / 10); } }`
   - Option: `n <= 0`

4. **Analyze the following recursive method.**
   - `public static long factorial(int n) { return n * factorial(n - 1); }`
   - Option: The method runs infinitely and causes a StackOverflowError.
5. **How many times is the factorial method in Listing 18.1 invoked for factorial(5)?**
   - Option: 6

6. **Which of the following statements are true?**游린
   - A. The Fibonacci series begins with 0 and 1, and each subsequent number is the sum of the preceding two numbers in the series.
   - B. The Fibonacci series begins with 1 and 1, and each subsequent number is the sum of the preceding two numbers in the series.
   - C. The Fibonacci series begins with 1 and 2, and each subsequent number is the sum of the preceding two numbers in the series.
   - D. The Fibonacci series begins with 2 and 3, and each subsequent number is the sum of the preceding two numbers in the series.

7. **How many times is the fib method in Listing 18.2 invoked for fib(5)?**
   - Option: 15

8. **Fill in the code to complete the following method for computing a Fibonacci number.**
   - `public static long fib(long index) { if (index == 0) // Base case return 0; else if (index == 1) // Base case return 1; else // Reduction and recursive calls return __________________; }`
   - Options: `fib(index - 1) + fib(index - 2)`, `fib(index - 2) + fib(index - 1)`

9. **In the following method, what is the base case?**
   - `static int xMethod(int n) { if (n == 1) return 1; else return n + xMethod(n - 1); }`
   - Option: `n is 1`

10. **What is the return value for xMethod(4) after calling the following method?**游린
    - `static int xMethod(int n) { if (n == 1) return 1; else return n + xMethod(n - 1); }`
    - Option: 10 (Explanation: 4 + 3 + 2 + 1 = 10)

11. **Fill in the code to complete the following method for checking whether a string is a palindrome.**游린
    - `public static boolean isPalindrome(String s) { if (s.length() <= 1) // Base case return true; else if _____________________________ return false; else return isPalindrome(s.substring(1, s.length() - 1)); }`
    - Option: `(s.charAt(0) != s.charAt(s.length() - 1)) // Base case`

12. **Analyze the following code:**游린
    - `public class Test { public static void main(String[] args) { int[] x = {1, 2, 3, 4, 5}; xMethod(x, 5); } public static void xMethod(int[] x, int length) { System.out.print(" " + x[length - 1]); xMethod(x, length - 1); } }`
    - Option: The program displays 5 4 3 2 1 and then raises an ArrayIndexOutOfBoundsException.

13. **Fill in the code to complete the following method for checking whether a string is a palindrome.**游린
    - `public static boolean isPalindrome(String s) { return isPalindrome(s, 0, s.length() -

1); } public static boolean isPalindrome(String s, int low, int high) { if (high <= low) // Base case return true; else if (s.charAt(low) != s.charAt(high)) // Base case return false; else return _______________________________; }`
    - Option: `isPalindrome(s, low + 1, high - 1)`

游린14. **Fill in the code to complete the following method for sorting a list.**
    - `public static void sort(double[] list) { ___________________________; } public static void sort(double[] list, int high) { if (high > 1) { // Find the largest number and its index int indexOfMax = 0; double max = list[0]; for (int i = 1; i <= high; i++) { if (list[i] > max) { max = list[i]; indexOfMax = i; } } // Swap the largest with the last number in the list list[indexOfMax] = list[high]; list[high] = max; // Sort the remaining list sort(list, high - 1); } }`
    - Option: `sort(list, list.length - 1)`

15. **Fill in the code to complete the following method for binary search.**游린
    - `public static int recursiveBinarySearch(int[] list, int key) { int low = 0; int high = list.length - 1; return __________________________; } public static int recursiveBinarySearch(int[] list, int key, int low, int high) { if (low > high) // The list has been exhausted without a match return -low - 1; // Return -insertion point - 1 int mid = (low + high) / 2; if (key < list[mid]) return recursiveBinarySearch(list, key, low, mid - 1); else if (key == list[mid]) return mid; else return recursiveBinarySearch(list, key, mid + 1, high); }`
    - Option: `recursiveBinarySearch(list, key, low, high)`

16. **How many times is the recursive moveDisks method invoked for 3 disks?**
    - Option: 7

17. **How many times is the recursive moveDisks method invoked for 4 disks?**
    - Option: 15

18. **Analyze the following two programs:**游린
    - A: `public class Test { public static void main(String[] args) { xMethod(5); } public static void xMethod(int length) { if (length > 1) { System.out.print((length - 1) + " "); xMethod(length - 1); } } }`
    - B: `public class Test { public static void main(String[] args) { xMethod(5); } public static void xMethod(int length) { while (length > 1) { System.out.print((length - 1) + " "); xMethod(length - 1); } } }`
    - Option: Program A produces the output 4 3 2 1 and Program B prints 4 3 2 1 1 1 .... 1 infinitely.

19. **In LiveExample 18.9, to draw three smaller triangles recursively, the program invokes:**
    - A. displayTriangles(order - 1, p1, p12, p31)
    - B. displayTriangles(order - 1, p12, p2, p23)
    - C. displayTriangles(order - 1, p31, p23, p3)

20. **Which of the following statements are true?**
    - A. Recursive methods run faster than non-recursive methods.
    - B. Recursive methods usually take more memory space than non-recursive methods.
    - C. A recursive method can always be replaced by a non-recursive method.
    - D. In some cases, however, using recursion enables you to give a natural, straightforward, simple solution to a program that would otherwise be difficult to solve.


21. **Analyze the following functions:**
    - `public class Test1 { public static void main(String[] args) { System.out.println(f1(3)); System.out.println(f2(3, 0)); } public static int f1(int n) { if (n == 0) return 0; else { return n + f1(n - 1); } } public static int f2(int n, int result) { if (n == 0) return result; else return f2(n - 1, n + result); } }`
    - Option: f2 is tail recursion, but f1 is not.

22. **Show the output of the following code:**
    - `public class Test1 { public static void main(String[] args) { System.out.println(f2(2, 0)); } public static int f2(int n, int result) { if (n == 0) return 0; else return f2(n - 1, n + result); } }`
    - Option: 0.

23. **A ____________ method is the one that calls itself.**
    - Option: recursive.

24. **An ____________ recursion is the one that never stops.**
    - Option: infinite.

25. **Show the output of the following programs and identify base cases and recursive calls.**
    - (a) `public class Test { public static void main(String[] args) { System.out.println( "Sum is " + xMethod(5)); } public static int xMethod(int n) { if (n == 1) return 1; else return n + xMethod(n - 1); } }`
    - (b) `public class Test { public static void main(String[] args) { xMethod(1234567); } public static void xMethod(int n) { if (n > 0) { System.out.print(n % 10); xMethod(n / 10); } } }`
    - Options:
      - (a) Sum is 15 (5 + 4 + 3 + 2 + 1 = 15)
      - (b) 7654321.

26. **Write a recursive mathematical definition for computing 2^n for a positive integer n.**
    - Option: f(n) = 2 if n = 1; f(n) = 2 * 2^(n-1) for (n > 1).

27. **Write a recursive mathematical definition for computing x^n for a positive integer n and a real number x.**
    - Option: f(n) = x if n = 1; f(n) = x * x^(n-1) for (n > 1).

28. **Write a recursive mathematical definition for computing 1 + 2 + 3 + ... + n for a positive integer n.**
    - Option: f(n) = 1 if n = 1; f(n) = f(n-1) + n for (n > 1).

29. **Show the output of the following two programs:**
    - (a) `public class Test { public static void main(String[] args) { xMethod(5); } public static void xMethod(int n) { if (n > 0) { System.out.print(n + " "); xMethod(n - 1); } } }`
    - (b) `public class Test { public static void main(String[] args) { xMethod(5); } public static void xMethod(int n) { if (n > 0) { xMethod(n - 1); System.out.print(n + " "); } } }`
    - Options:
      - (a) The output is 5 4 3 2 1
      - (b) The output is 1 2 3 4 5.

30. **What is wrong in the following method?**
    - (a) `public class Test { public static void main(String[] args) { xMethod(1234567); } public static void xMethod(double n) { if (n != 0) { System.out.print(n); xMethod(n / 10); } } }`
    - (b) `public class Test { public static void main(String[] args) { Test test = new Test(); System.out.println(test.toString()); } public Test() { Test test = new Test(); } }`
    - Options:
      - (a) n is double. There is no guarantee that n != 0 will be eventually false.
      - (b) Infinite recursion due to new Test() inside the constructor Test().

31. **How many times is the fib method in Listing 18.2 invoked for fib(6)?**
    - Option: 25 times.

32. **Describe the

 characteristics of recursive methods.**
    - Option: One or more base cases (the simplest case) are used to stop recursion. Every recursive call reduces the original problem, bringing it increasingly close to a base case until it becomes that case.

33. **For the isPalindrome method in Listing 18.3, what are the base cases? How many times is this method called when invoking isPalindrome("abdxcxdba")?**
    - Options: The base cases are (1) s.length() <= 1 and (2) s.charAt(0) != s.charAt(s.length - 1). When invoking isPalindrome("abdxcxdba"), the isPalindrome method is called 5 times.

34. **How do you obtain the midpoint between two points?**
    - Option: The midpoint between p1 and p2 is ((p1.x + p2.x)/2, (p1.y + p2.y)/2), which can be obtained by invoking p1.midpoint(p2).

35. **Which of the following statements are true?**
    - a. Any recursive method can be converted into a nonrecursive method.
    - b. Recursive methods take more time and memory to execute than nonrecursive methods.
    - c. Recursive methods are always simpler than nonrecursive methods.
    - d. There is always a selection statement in a recursive method to check whether a base case is reached.
    - Options: A, B, D.

36. **What is a cause for a stack-overflow exception?**
    - Option: When a method is invoked, its contents are placed into a stack. If a method is recursively invoked, it is possible that the stack space is exhausted. This causes stack overflow.

37. **Identify tail-recursive methods in this chapter.**
    - Option: The isPalindrome method in Listing 18.4, sort method in Listing 18.5, and binarySearch method in Listing 18.6 are tail-recursive.

38. **Rewrite the fib method in Listing 18.2 using tail recursion.**
    - Option: `/* Return the Fibonacci number for the specified index */ public static long fib(long index) { return fib(index, 1, 0); } /* Auxiliary tail-recursive method for fib */ private static int fib(long index, int next, int result) { if (index == 0) return result; else return fib(index - 1, next + result, next); }`

39. **Recursion is a technique that leads to elegant solutions to problems that are difficult to program using simple loops.**
    - Option: True.

40. **Recursion**
    - Option: ____________ is an alternative form of program control. It is essentially repetition without a loop.

41. **A _______ recursive method is efficient for reducing stack size.**
    - Option: tail.


https://quizlet.com/419167280/chapter-18-recursion-flash-cards/


i need to get hte html from thsi link
https://quizlet.com/162509469/cs-ii-chapter-18-quiz-flash-cards/


